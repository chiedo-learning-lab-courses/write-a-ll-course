title: Write a Learning Lab course
tagline: Learn how to author your own Learning Lab course.
description: Use Learning Lab's strengths for fast feedback to author your own course.
template:
  name: lab-starter
  repo: write-a-ll-course-template-2.0
before:
  - type: createLabel
    name: help
    color: ff0000
  - type: createLabel
    name: "1: Committing a header"
    color: 4b0082
  - type: createLabel
    name: "2: Closing an issue"
    color: 0000cd
  - type: createLabel
    name: "3: Fixing a bug"
    color: 40e0d0
  - type: createLabel
    name: "4: Writing a function"
    color: e9967a

# Template: 
  # [x] Template: commented config, README, course-details.
  # [x] Has labels "help", plus labels corresponding to answers in step 7.
  # [x] Branch `course-planning` for step 1: adding `course-planning.md` file, with a few ideas. User told not to edit the first two.
  # [x] Branch `template` for step 4, with comments added to the place where the template repository goes
  # [x] Branch `map-events` for step 5, with learning objective for 1 mapped out, and 2 is ready to go with comments 
  # [x] Branch `first-response` for step 8. After step 7 it gets merged into `map-events`. It has an empty response file for the first step.
  # [x] Branch `first-feedback` for step 11. After step 10 it gets merged into `map-events`. It has two empty response files.

# Can we check to see if the user imports a course in Learning Lab? :tada:
# Q: Can authors take draft courses?
# I need to make a step for the user to transition their events and steps to the config.
# Maybe make all PRs at beginning, put them on a project board, and link to it for the first step, letting them know they can reuse this and think about these steps when they write courses of their own
# TODO: Can we programmatically get all of the events currently used, and rank them by popularity? For step 5 or 6?
# TODO is step 9 in the config or still planning? Directions are currently unclear. Should it be as a before step, or within another step?


# Step 1: Decide what to teach - what's the right step? 
  # README.md or course-details
  # We have suggestions but they can also write their own. Our suggestions are ideas, not solutions. Ex: Introduction to GitHub, Introduction to Markdown

  - type: createPullRequest
    title: Choose a topic for your course
    body: 01_welcome.md
    head: course-planning
  - type: updateBranchProtection

steps:
  - title: Choose a topic for your course
    description: Choose what you'd like to teach through Learning Lab, or borrow one of our suggestions for practice.
    event: issue_comment.created
    link: '{{ repoUrl }}/pull/1'
    actions:
    # Step 2: Break course into smaller, targeted learning objectives
    - type: respond
      with: 02_break-it-down.md
      data:
        url: '%payload.repository.html_url%/edit/course-planning/course-planning.md?'
  - title: Break your course into smaller steps
    description: Break down what you'd like to teach into smaller learning objectives.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions: 
    # Step 3: Merge the pull request
    - type: removeBranchProtection
    - type: respond
      with: 03_merge.md

  - title: Merge your learning objectives
    description: Merge the pull request breaking down your course topic into smaller learning objectives.
    event: pull_request.closed
    link: '{{ repoUrl }}/pull/1'
    actions:
    - type: gate
      every: true
      gates:
      - left: '%payload.action%'
        operator: ===
        right: closed
      - left: '%payload.pull_request.merged%'
    - type: respond
      with: 03_nice-work.md
    # Step 4: Choose a template project
    - type: createPullRequest
      title: Choose a template project
      body: 04_choose-a-template.md
      head: template
      data:
        url: '%payload.repository.html_url%/edit/template/config.yml?'
    - type: updateBranchProtection

  - title: Reference the template
    description: Edit the config file to reference your chosen template repository.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/2'
    actions:
  # - type: gate # we validate that the repository exists
    - type: respond
      with: 04_good-template.md
    - type: removeBranchProtection
    - type: mergeBranch
      head: template
    - type: mergeBranch
      head: master
      base: map-events
    - type: deleteBranch
      branch: template
  # Step 5: Mapping learning objectives to events and how to choose events that align with the learning objective
    - type: createPullRequest
      title: Map learning objectives to events
      body: 05_map-events.md
      head: map-events
      data:
        url: '%payload.repository.html_url%/edit/map-events/course-planning.md?'
    - type: updateBranchProtection

  - title: Map learning objectives to events
    description: Map the learning objectives you wrote to specific events from GitHub webhooks.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
   # - type: gate #  we check if they have events or things that aren't events where events should be
    # Step 6: Rough outline of learning objectives as events
    - type: respond
      with: 06_create-outline.md
      data:
        url: '%payload.repository.html_url%/edit/map-events/course-planning.md?'

  - title: Create an outline of learning objectives as events
    description: Using the same strategy of mapping learning objectives to events, create an outline of events for your course.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
    # - type: gate  we validate that there are actually events
    # Step 7: 3 phases of a step
    - type: respond
      with: 07_3-phases.md

  - title: Choose the example that shows the three phases
    description: Apply a label that corresponds to the example showing the three phases of a step.
    event: pull_request.labeled
    link: '{{ repoUrl }}/pull/3'
    actions:
    #- type: gate check that the correct label was applied - correct labels are 2 "2: Closing an issue" and 3 "3: Fixing a bug"
      # else: If user needs help, longer explanation of each example, plus instructions/video of how to add labels
    - type: gate
      every: true
      gates:
      - left: '%payload.pull_request.labels.0.name%'
        operator: ===
        right: "2: Closing an issue"
      - left: '%payload.pull_request.labels.1.name%'
        operator: ===
        right: "3: Fixing a bug"
      else:
        - type: gate
          left: '%payload.pull_request.labels.0.name%'
          operator: ===
          right: "help"
        - type: respond
          with: 07_help.md
      # Step 8: Pick 1 learning objective and write the phase 1 response
    - type: respond
      with: 08_first-response.md
      data:
        url: '%payload.repository.html_url%/edit/map-events/responses/01_first-response.md?'
    - type: mergeBranch
      base: map-events
      head: first-response

  - title: Create the first response
    description: Write the first response, phase 1, for the first step of your course.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
   # - type: gate # we validate that it's more than 5 words or something.
    - type: getFileContents
      filename: 'responses/01_first-response.md'
      action_id: contents
    - type: gate
      left: '/((\w+\s)|(\w+.\s)){4,}\w+/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 08_correct-response.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/responses/01_first-response.md?'
   # Step 9: How to give the user the response? ACTIONS in the config
    - type: respond
      with: 09_first-action.md
      data:
        url: '%payload.repository.html_url%/edit/map-events/config.yml?'

  - title: Write the first Learning Lab action
    description: Write the first Learning Lab action for a response into your course's configuration file.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
    # - type: gate We validate that the proper text is added, with an action response pointing to the right file in the right line of the config.
    - type: getFileContents
      filename: 'config.yml'
      sha: '%payload.pull_request.head.sha%'
      action_id: contents
    - type: gate
      left: '/(type: respond)(\n|\r)(  |\t)(with: 01_first-response.md)/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 09_config-reference.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/config.yml?'
    # Step 10: Phase 2 - checking if the user did it, intro to Gate
    - type: respond
      with: 10_gate.md
      data:
        url: '%payload.repository.html_url%/edit/map-events/config.yml?'

  - title: Write a gate
    description: Write a gate to check the user's first step  
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions: 
    # - type: gate We validate it's actually a gate
    - type: getFileContents
      filename: 'config.yml'
      action_id: contents
    - type: gate
      left: '/(type: gate)(\n|\r)(    |\t\t)(left:.+)(\n|\r)(    |\t\t)(operator:.+)(\n|\r)(    |\t\t)(right:.+)/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 10_gate-check.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/config.yml?'
    # Step 11: Phase 3 - feedback, create the response
    - type: mergeBranch
      base: map-events
      head: first-feedback
    - type: respond
      with: 11_feedback.md
      data:
        niceUrl: '%payload.repository.html_url%/edit/map-events/responses/01_nice-work.md?'
        tryagainUrl: '%payload.repository.html_url%/edit/map-events/responses/01_try-again.md?'


  - title: Write feedback for the learner
    description: Write feedback into the feedback response for the learner to let them know they've done it right.
    event: issue_comment.created
    link: '{{ repoUrl }}/pull/3'
    actions: 
    # - type: gate we validate that the correct file was changed, with enough words
    - type: getPullRequest
      action_id: pull_request
    - type: getFileContents
      filename: 'responses/01_nice-work.md'
      sha: '%actions.pull_request.data.head.sha%'
      action_id: contents
    - type: gate
      left: '/((\w+\s)|(\w+.\s)){4,}\w+/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 11_correct-response1.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/responses/01_nice-work.md?'
    - type: getFileContents
      filename: 'responses/01_try-again.md'
      sha: '%actions.pull_request.data.head.sha%'
      action_id: contents
    - type: gate
      left: '/((\w+\s)|(\w+.\s)){4,}\w+/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 11_correct-response2.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/responses/01_try-again.md?'
    # Step 12: Code the response action for phase 3 into the config
    - type: respond
      with: 12_phase-3-config.md
      data:
        url: '%payload.repository.html_url%/edit/map-events/config.yml?'

  - title: Write the config logic
    description: Write the config logic for both responses to the learner in their first step.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
    # - type: gate we check that they have both responses
    - type: getFileContents
      filename: 'config.yml'
      sha: '%payload.pull_request.head.sha%'
      action_id: contents
    - type: gate
      left: '/(type: respond)(\n|\r)(    |\t\t)(with: 01_nice-work.md)/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 12_feedback-reference.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/config.yml?'
    # Step 13: Config metadata (title, etc)
    - type: respond
      with: 13_metadata.md
      data:
        url: '%payload.repository.html_url%/edit/map-events/config.yml?'

  - title: Create course metadata
    description: Add the course metadata like title and description to the configuration file.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
    # - type: gate  We validate they committed valid metadata. 
    - type: getFileContents
      filename: 'config.yml'
      sha: '%payload.pull_request.head.sha%'
      action_id: contents
    - type: gate
      left: '/(title:.+)(\n|\r)(tagline:.+)(\n|\r)(description:.+)(\n|\r)(template:)/'
      operator: test
      right: '%actions.contents%'
      else:
        - type: respond
          with: 13_check-metadata.md
          data:
            url: '%payload.repository.html_url%/edit/map-events/config.yml?'           
    # Step 14: Import the course as a draft
    - type: respond
      with: 13_nice-job.md
    - type: removeBranchProtection
    - type: mergeBranch
      head: map-events
    - type: createIssue
      title: Import the course
      body: 14_import-course.md 
    - type: respond
      with: 14_troubleshooting.md
      issue: Import the course

  - title: Import the course
    description: Import this repository as a course on GitHub Learning Lab.
    event: issue_comment.created # should be import ???
    link: '{{ repoUrl }}/issues/4'
    actions:
    # Step 15: Try to take your own course 
    - type: respond
      with: 15_try-it.md

  - title: Close the issue
    description: To signal that you've tested your course, close this issue.
    event: issues.closed
    link: '{{ repoUrl }}/issues/4'
    actions:
      # Step 16: Back to learning objectives/events, create phases 1-3 for additional steps
    - type: respond
      with: 16_finish-it.md
