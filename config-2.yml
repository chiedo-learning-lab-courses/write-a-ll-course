title: Write a Learning Lab course
tagline: Learn how to author your own Learning Lab course.
description: Use Learning Lab's strengths for fast feedback to author your own course.
template:
  name: lab-starter
  repo: write-a-ll-course-template
before:

# Template: 
  # commented config, README, course-details, /responses. 
  # Has labels "help", plus labels corresponding to answers in step 7.
  # Branch `course-planning` for step 1: adding `course-planning.md` file, with a few ideas. User told not to edit the first two.
  # Branch `template` for step 4, with comments added to the place where the template repository goes
  # Branch `map-events` for step 5, with learning objective for 1 mapped out, and 2 is ready to go with comments 
  # Branch `first-response` for step 8. After step 7 it gets merged into `map-events`. It has an empty response file for the first step.
  # Branch `first-feedback` for step 11. After step 10 it gets merged into `map-events`. It has two empty response files.

# Can we check to see if the user imports a course in Learning Lab? :tada:
# Q: Can users take draft courses?

# Step 1: Decide what to teach - what's the right step? 
  # README.md or course-details
  # We have suggestions but they can also write their own. Our suggestions are ideas, not solutions. Ex: Introduction to GitHub, Introduction to Markdown

  # 1.1
    # (This is a pull request) Welcome! Prereqs are: this. If you'd like to teach something on Learning Lab, you probably already have something in mind. For this course, you can actually start writing that idea and making it reality! If you're just curious about how to write a course and would rather use our idea, here are a few: like that. The first thing we're going to do is talk about and choose a topic. 
    # Here are some things to think about: Does it happen on GitHub anyway? Learning Lab is best when it's working with something that it can interact with naturally. Things like painting would be difficult! But things that are committed, or interacted with on GitHub, are the perfect fit.
    # What's the scope or size? For example, JavaScript makes a lot of sense to teach on Learning Lab because code happens on GitHub. But, it's a really big topic. It may be a good idea to segment your topic into smaller parts, that can be their own Labs, and then users can take a series of Labs. If you aren't sure what the right size is, that's OK - that should become more clear as we go on.
    # Whether you choose your own topic or one of ours, we'll stick with the same one throughout this course, so it's good go choose one now. Please comment below with the subject that you'd like to teach in your Learning Lab course.

  # 1.2
    # User comments, we don't validate it though

  # 1.3
    # Great! When you commented, you triggered something called a webhook that I heard, and now I'm here! You may be wondering if I checked to see if  what you wrote was a _real_ topic. We'll talk about that kind of logic later - both how to use it, and when to use it. (Spoiler - for this step, I didn't check! I am pretty smart, but not smart enough to tell if you typed a good idea or not.)

# Step 2: Break course into smaller, targeted learning objectives

  # 2.1
    # Now that you know what you want to teach, the next thing to do is break it down into steps. This can be tricky - put on a teacher hat and an engineer hat at the same time. 
    # To break down the thing you want to teach, think about the observable behaviors that show that the user is doing it right. If you were watching this person, how would you know they've mastered the thing? Some exapmles are: this.
    # What NOT to do: have huge or ambiguous steps. Ex: Write an app! 
    # In the file in this pull request, write the steps as observable behaviors. It's OK if there are a lot - it's better to break it down into the right size of steps, then realize the scope of the course is wrong, than to have HUGE steps.
  
  # 2.2
    # User commits, we check to see that there are a few list items

  # 2.3
    # Nice work. As a robot, this kind of thing is really hard for me to check. If you'd like to get some feedback on your steps before continuing with the course, here's how: here. Once you're ready, merge this pull request to move on to the next step.

# Step 3: Merge the pull request

  # 3.1 Merge the pull request
  # 3.2 User merges
  # 3.3 Great work! I'll get us started in our next pull request.

# Step 4: Choose a template project

  # 4.1
    # One of the things that makes Learning Lab special is the ability to learn a skill _in context_. As you think about what you want to teach, it's critical to think about the context that you want to teach your topic in.
    # If you're teaching JavaScript, an app makes sense. If you're teaching Markdown, maybe you don't need a project at all! With CSS, you could use a project relating to design.
    # Think of a project that is "real" and practical with the skill you're teaching, without introducing too many additional and possibly confusing concepts. 
    # This will become the template repository - the codebase that's created as a repository for the learner, which they can (and probably will, depending on your choices) interact with throughout the course.
    # The template will need to be under _the same account as the one who owns this course_, so make sure you do that now.
    # Select a template repository - or use ours - based on the things above. Here's how it needs to be stored. Edit the config to link to that template repository.

  # 4.2
    # User edits config to reference template repository, and we validate.

  # 4.3
    # Nice work!

# Step 5: Mapping learning objectives to events and how to choose events that align with the learning objective

  # 5.1
    # Alright - you've gotten a project chosen, and you've laid out the steps for your learners. Next, we're going to get into something new with Learning Lab: events!
    # An `event` is the webhook that the learner triggers, and it's how Learning Lab knows that it should do something.
    # Some of the most common examples are: x. Next, your job is to map your learning objectives to events. 
    # You may want to start ordering them now, but it's OK if you're not sure.
    # This step will reveal some things about your course, so it's important to pay attention.
    # How can each learning objective or step be translated through a GitHub event? A risk here is to have too many of the same type of events, or to have events represent things that aren't actually what you're trying to teach.
    # For example, you may want to show a lot of information to the learner, and then have them close the issue to signifiy they've read it. That may make sense for one or two steps in your course, but imagine going through a whole course like that - it isn't actually checking if the learner read - it's checking if the learner knows how to close issues!
    # Try to choose events that correspond directly to what you want the learner to do. If you're trying to teach the learner to import a npm module into a `package.json` file, have the event be the actual commit of the user doing that.
    # I've taken your steps from earlier, and put them as a comment in this issue. Copy those steps, and find an event that matches. Here's where you find them all. Just do the first one, which I've already defined for you.

  # 5.2
    # Commit, and we check if they have events or things that aren't events where events should be.

  # 5.3
    # Nice work!

# Step 6: Rough outline of learning objectives as events

  # 6.1
    # I want to reiterate how important it is to choose events that correlate as directly as possible to what you're asking the learner to do.
    # Ideally, if you're not using gates or other tests, the event _should_ be what you're asking the learner to do. 
    # Go ahead and put in the events for the rest of the learning objectives. You can use this time to re-order them in a way that makes sense to you for a flow of a course.

  # 6.2
    # Commit, we validate that there are actually events

  # 6.3
    # Nice work!

# Step 7: 3 phases of a step

  # 7.1
    # Have you ever thought about what teaching _is_? What are the behaviors that a good teacher has to make it easy to learn? Maybe you have - and maybe you haven't. 
    # Let's break down teaching into three steps: telling the learner what to do, watching them to see if they do it or not, and then giving them specific feedback about what they did or didn't do right. Repeat! That may sound simple, but it's the basis of fast feedback that is _learning_. :rainbow: 
    # Just like we broke down your teaching goal into smaller steps, let's break down _teaching_ in the same way. Let's focus on one learning objective...the smallest possible unit of behavior we can identify. 
    # For starters, let's choose writing unordered lists in Markdown. That's what we want the user to know how to do. Let's apply those three phases.
    # Phase 1: Telling the learner what to do - what does the learner need to be able to exhibit the behavior that we want? Well, they'd need to know about Markdown, and it'd be nice if they had a computer with a keyboard, and a place to type the text. Let's assume those contextual things are taken care of. The main information that a learner would need would be, what is an unordered list? How is that written in Markdown? Then, we'd ask the user to do that.
    # Phase 2: The learner does it and we watch - there's an important part of this step. It's not just the learner doing it, but it's how we are going to watch and observe if they did it correctly or not. In Learning Lab, this is usually an issue comment or a commit changing a file. We give them the space to try it out, and we watch via webhooks. We use gates to "check" if they did what we asked them to.
    # Phase 3: We give the learner feedback - based on the detailed and keen observation in the second phase, we can give them the feedback they need to either validate that they learned it correctly, or let them know that they _didn't_ do it correctly, and they should try again. It's important to give the most specific feedback as possible. This is similar to unit tests - if they're vague, they're not really helpful. The more personalized and exact the feedback can be, the more quickly and accurately the learner will understand what they did right and/or wrong.
    # This is how _all_ learning happens, through feedback, whether it's from a teacher in a classroom, a bot like me, or a stovetop that gives you the feedback "if you touch me, it HURTS!". Faster and more exact feedback is always a better teacher.
    # This is the process that we are going to use for each of the learning objectives you've written. 
    # Before we start writing some for this course, let's practice identifying this three phase process. I've written four examples below - some of which are examples of this three phase process, and some of which _aren't_. For each example, there is a label. For each example that _is_ a good example of the three phases, add the corresponding issue label to this pull request. Once all of them match what I expect, I'll give you the next instructions.
    # If you get stuck, add the issue label "help" and I'll give you some more detail. (include instructions for how to add labels)

  # 7.2
    # User applies the correct labels to the pull request

  # 7.3
    # If user needs help, longer explanation of each example, plus instructions/video of how to add labels
    # Nice work!
    
# Step 8: Pick 1 learning objective and write the phase 1 response

  # 8.1
    # Let's do one together before we start going into the others. If the first learning objective is based on Issues - specifically, how to open one. What do we need to do in phase one to prompt the user to demonstrate that behavior in phase two?
    # Now is a good time to learn about _responses_. The `response` directory is where you store the files that will be what the bot says.
    # To practice, I've got a file ready for you in this pull request. Go ahead and write your instructions (phase 1 for this objective) in the file in this pull request and commit.

  # 8.2
    # Writes an issue comment, we validate that it's more than 5 words or something.

  # 8.3
    # Awesome! You're probably thinking - how is Learning Lab validating that I did the thing just now!? And you have a point. With text, it's tricky - so I checked to make sure you wrote more than 5 words, but I'm not checking to see if you wrote anything that makes sense. This is a limitation of Learning Lab. 
    # For now, here are a couple examples of real, human-proofed answers. Compare your answer and notice - is yours similar? Is it very different? What would you change?

# Step 9: How to give the user the response? ACTIONS in the config

  # 9.1
    # Fabulous. Now that you've looked at your "phase 1" and compared it to other "phase 1s", we know what to say.
    # We need to figure out _how_ to say it to the user in Learning Lab. Now is the time to learn about _actions_. 
    # Actions are ...
    # You've got the response file, and now it's time to edit the `config` file with the proper action: respond. Here are some examples:
    # Do that now.

  # 9.2
    # We validate that the proper text is added, with an action response pointing to the right file in the right line of the config.

  # 9.3
    # Nice work!

# Step 10: Phase 2 - checking if the user did it, intro to Gate

  # 10.1
    # Phase 2 is already decided for us because the _event_ itself is the opening of an issue. If a user can make that trigger, they've learned what we wanted them to learn!
    # In some cases, you may want to use a _gate action_ to validate things. Gates are like:
    # You can also get creative here - maybe you want to have tests be included in the template repository, and then when they're run, the status could be the event, or something that you check. 
    # For now, even though the event itself will give us a pretty good idea, let's say we wanted to make sure that the new issue was opened with a title and with a body, so it's following good communication practices.
    # That gate would look like:
    # Now, add a gate to this step.

  # 10.2
    # User commits a gate to this step
    # We validate it

  # 10.3
    # We used a gate to see what you did, and it is very close but not quite right.
    # We used a gate to see what ou did, and it looks great!

# Step 11: Phase 3 - feedback, create the response

  # 11.1
    # Nice, now you've got phases one and two covered. It's time for phase 3. 
    # Phase 3 is interesting because what you say depends on what you saw in phase 2. Let's keep it simple for now and have only two possibilities: either the user did it right, or they didn't. This structure is extremely common in Learning Labs right now, but if you use your imagination, you can probably envision more complex possibilities in the future.
    # There are two response files in this pull request that I just added - one for the "happy path" where the user did it right, and one to redirect them and give them help to get back on track.
    # Fill in those response files now with:

  # 11.2
    # User commits, and we validate

  # 11.3
    # Nice job!
    # Not quite...

# Step 12: Code the response action for phase 3 into the config

  # 12.1
    # To put this response in the config, it will be very similar to phase 1. But, _where_ the action goes is different. 
    # We need to be careful of the gate here. If the gate fails, we can have special logic for the "unhappy path" response, like:
    # The "happy path" response will be a regular response triggered if the gate is successful, like: 
    # Go ahead and edit the config to add the unhappy path _and_ the happy path response.
    # Are you noticing that we're asking a bit more of you now? Since you've already added a response before, we're now asking you to do two at a time. This is on purpose - it's important to balance how much you're asking learners to do. It's bad to bore them, but it's also really bad to overwhelm them. Every learner is different, so try to pick a "middle of the road" solution. This is ours. What do you think?
  
  # 12.2
    # User edits config to have happy and unhappy path responses in step 1 in config
    # We validate

  # 12.3
    # Nice job!
    # Not quite...

# Step 13: Config metadata (title, etc)

  # 13.1
    # Awesome work so far! Now, you've officially got your first step written. It's a good time to try this course out. Before we do, we need to pay some attention to the metadata in the config file, so that Learning Lab knows what to do with it. 
    # The parts that we need now are the title, description, name of the learner's repo. The information is there in detail in comments in the config file. 
    # Edit the config file (lines x, y, and z) so the comments are gone, and your information is there! If you want help, here are a few examples:
    # Make sure the name is different than the name of this repository, or else you'll have some trouble taking the course yourself.

  # 13.2
    # User commits to config with metadata
    # We validate

  # 13.3
    # Nice job! I'LL MERGE THIS!!!
    # Not quite...

# Step 14: Import the course as a draft

  # 14.1
    # (Issue) Woohoo! You could keep going, and we will later - but now your course can actually be _tested_. Let's talk about that. 
    # What are draft courses?
    # What are public vs private?
    # How can you keep working once it's launched?
    # Course builder or not course builder?
    # Instructions: Import the course

  # 14.2
    # User has imported the course

  # 14.3
    # Woohoo! Nice! 

# Step 15: Try to take your own course

  # 15.1
    # Go ahead and take the course! You'll be able to register for the course, and take it. What do you think?
    # Once you're able to go through the course, close this issue.

  # 15.2
    # User closes issue

  # 15.3
    # Nice job!

# Step 16: Back to learning objectives/events, create phases 1-3 for additional steps

  # 16.1
    # So, you've done it - you've started your own Learning Lab course. I will leave you here with the last set of instructions:
    # Complete this course by following the three phase approach. Phase 1 - tell the learner what to do. Phase 2 - watch if they do it. Phase 3 - tell them if they did it or not.
    # Remember, the "events" or "gates" should be as literally and closely mapped to the learning objective as possible.
    # If you need help, get it here!: 